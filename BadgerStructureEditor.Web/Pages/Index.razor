@*


                ░░░░

                                            ██
                                          ██░░██
  ░░          ░░                        ██░░░░░░██                            ░░░░
                                      ██░░░░░░░░░░██
                                      ██░░░░░░░░░░██
                                    ██░░░░░░░░░░░░░░██
                                  ██░░░░░░██████░░░░░░██
                                  ██░░░░░░██████░░░░░░██
                                ██░░░░░░░░██████░░░░░░░░██
                                ██░░░░░░░░██████░░░░░░░░██
                              ██░░░░░░░░░░██████░░░░░░░░░░██
                            ██░░░░░░░░░░░░██████░░░░░░░░░░░░██
                            ██░░░░░░░░░░░░██████░░░░░░░░░░░░██
                          ██░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░██
                          ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
                        ██░░░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░░░██
                        ██░░░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░░░██
                      ██░░░░░░░░░░░░░░░░░░██████░░░░░░░░░░░░░░░░░░██
        ░░            ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
                        ██████████████████████████████████████████




                  ░░
                            THIS CODE IS AWFUL (DynamicNbt is too)
*@

@page "/"
@using BadgerSerialization.Nbt
@using BadgerSerialization
@using BadgerStructureEditor.Web.Model
@using BadgerStructureEditor.Web.Services
@using System.Diagnostics
@using System.Text
@using BadgerSerialization.Models

@inject ISnackbar Snackbar
@inject IBlockProvider BlockProvider
@inject IJSRuntime JsRuntime

@code {
    private enum State
    {
        Loading,
        FileUpload,
        Editor
    }
}

@switch (_state)
{
    case State.Loading:
        <MudStack Style="width: 100%">
            <MudText Align="Align.Center">Loading...</MudText>
        </MudStack>
        break;
    case State.FileUpload:
        <MudStack Style="width: 100%">
            <MudFileUpload T="IBrowserFile" MaximumFileCount="999" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                <ButtonTemplate>
                    <MudPaper Height="300px" Outlined="true" Class="@_dragClass">
                        <MudText Typo="Typo.h6">Drag and drop your .mcstructure files here:</MudText>
                    </MudPaper>
                </ButtonTemplate>
            </MudFileUpload>
        </MudStack>
        break;
    case State.Editor:
        <MudPaper Outlined="true" Class="border-dashed">
            <MudStack Justify="Justify.SpaceEvenly">
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ExportStructure">Save</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ClearFile">Clear</MudButton>
            </MudStack>
        </MudPaper>
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text="Block Palette">
                <MudExpansionPanels MultiExpansion="true">
                    @for (int i = 0; i < _blockPalette.Count; i++)
                    {
                        var blockIdx = i;
                        var block = _blockPalette[blockIdx];

                        <MudExpansionPanel Text="@block.Name">
                            <MudStack>
                                <MudTextField T="string" ValueChanged="@(newName => SetBlock(blockIdx, newName))" Label="Change block name" />
                                @foreach (var pair in block.States)
                                {
                                    <MudStack Row="true">
                                        <MudPaper Class="pa-3">@pair.Key</MudPaper>
                                        @{
                                            var stateInfo = BlockProvider.GetState(pair.Key)!;
                                            var value = block.States[pair.Key];
                                        }

                                        @switch (stateInfo.Type)
                                        {
                                            case StateType.Bool:
                                                <MudChipSet Filter="true" Mandatory="true" SelectedChipChanged="@(chip => block.States[pair.Key] = (byte) (chip.Text == "true" ? 1 : 0))">
                                                    <MudChip Default="@(value == 1)" Text="true" Color="Color.Success"/>
                                                    <MudChip Default="@(value == 0)" Text="false" Color="Color.Error"/>
                                                </MudChipSet>
                                                break;
                                            case StateType.Int:
                                                <MudNumericField Value="@value" T="int" ValueChanged="val => block.States[pair.Key] = (byte) val" />
                                                break;
                                            case StateType.Enum:
                                                <MudChipSet Filter="true" Mandatory="true" SelectedChipChanged="@(chip => block.States[pair.Key] = (byte) stateInfo.Values.IndexOf(chip.Text))">
                                                    @for (int j = 0; j < stateInfo.Values.Count; j++)
                                                    {
                                                        <MudChip Default="@(j == value)" Text="@stateInfo.Values[j]" Color="Color.Success" />
                                                    }
                                                </MudChipSet>
                                                break;
                                            default:
                                                <MudText>Invalid state type.</MudText>
                                                break;
                                        }
                                    </MudStack>
                                }
                            </MudStack>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Entities">
                <MudButton Color="Color.Success" OnClick="AddEntity">Add entity</MudButton>
                <MudStack>
                    @foreach (var entity in _badgerEntities)
                    {
                        <MudPaper Outlined="true" Class="border-dashed">
                            <MudTextField T="string" Value="@entity.Archetype" Label="Archetype" ValueChanged="@(str => entity.Archetype = str)"/>
                            <MudNumericField T="float" Value="@entity.Position[0]" Label="Positon (X)" ValueChanged="@(val => entity.Position[0] = val)" />
                            <MudNumericField T="float" Value="@entity.Position[1]" Label="Positon (Y)" ValueChanged="@(val => entity.Position[1] = val)"/>
                            <MudNumericField T="float" Value="@entity.Position[2]" Label="Positon (Z)" ValueChanged="@(val => entity.Position[2] = val)" />
                            <MudNumericField T="float" Value="@entity.Yaw" Label="Yaw" ValueChanged="@(val => entity.Yaw = val)" />
                        </MudPaper>
                    }
                </MudStack>
            </MudExpansionPanel>
        </MudExpansionPanels>
        break;
    default:
        throw new UnreachableException();
}

@code {
    private State _state = State.Loading;

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private string _mcStructureFilename = string.Empty;
    private readonly List<SerializedBlockInfo> _blockPalette = new();
    private readonly List<StructureEntity> _badgerEntities = new();
    private Dictionary<string, dynamic> _structureNbt = new();

    protected override async Task OnInitializedAsync()
    {
        await BlockProvider.Initialize();
        _state = State.FileUpload;
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var file = e.File;
        if (file.Name.EndsWith(".mcstructure"))
        {
            _mcStructureFilename = file.Name;
            await ParseStructure(file);
            _state = State.Editor;
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("File was not a .mcstructure file!", Severity.Warning);
        }
    }

    private async Task ParseStructure(IBrowserFile file)
    {
        _blockPalette.Clear();
        _badgerEntities.Clear();

        await using var fs = file.OpenReadStream(5000000);
        await using var structureStream = new MemoryStream();
        await fs.CopyToAsync(structureStream);
        Console.WriteLine($"Read file buffer for file {file.Name}.");

        structureStream.Seek(0, SeekOrigin.Begin);
        using var structureReader = new BadgerBinaryReader(structureStream);
        _structureNbt = DynamicNbt.Read(structureReader);

        var structurePalette = (Dictionary<string, dynamic>)_structureNbt["structure"]["palette"];
        Debug.Assert(structurePalette.Count == 1, "structurePalette.Count == 1");
        List<dynamic> palette = structurePalette.Values.Single()["block_palette"];

        if (palette.Count > 0)
        {
            for (int i = 0; i < palette.Count; i++)
            {
                Console.WriteLine(palette[i]);
                if (palette[i] is Dictionary<string, dynamic> compoundPalette)
                    _blockPalette.Add(BlockProvider.ConvertBlock(compoundPalette));
                else
                {
                    using var reader = new BadgerBinaryReader(new MemoryStream(palette[i]));
                    reader.ReadVarUInt32();

                    try
                    {
                        _blockPalette.Add(BlockProvider.ConvertBlock(reader.ReadSerializedBlock()));
                    }
                    catch (InvalidDataException e)
                    {
                        Snackbar.Add(e.Message, Severity.Error);
                    }
                }
            }
        }

        if (!_structureNbt["structure"].ContainsKey("extensions") ||
            !_structureNbt["structure"]["extensions"].ContainsKey("badger") ||
            !_structureNbt["structure"]["extensions"]["badger"].ContainsKey("ecs"))
            return;

        var entities = (List<dynamic>) _structureNbt["structure"]["extensions"]["badger"]["ecs"];
        _badgerEntities.AddRange(entities.Select(entity => new StructureEntity
        {
            Archetype = Encoding.UTF8.GetString(entity["archetype"]),
            Position = ((List<dynamic>) entity["pos"]).Select(x => (float) x).ToArray(),
            Yaw = entity["yaw"]
        }));
    }

    private async Task ExportStructure()
    {
        var structurePalette = (Dictionary<string, dynamic>)_structureNbt["structure"]["palette"];
        Debug.Assert(structurePalette.Count == 1, "structurePalette.Count == 1");

        List<dynamic> palette = structurePalette.Values.Single()["block_palette"];
        palette.Clear();

        foreach (var entry in _blockPalette)
        {
            using var ms = new MemoryStream();
            await using var writer = new BadgerBinaryWriter(ms);

            var block = new SerializedBlock(
                BlockProvider.GetBlock(entry.Name)!.Hash,
                entry.States.ToDictionary(
                    x => BlockProvider.GetState(x.Key)!.Hash,
                    x => x.Value)
            );

            writer.WriteVarUInt32(0);
            writer.Write(block);
            palette.Add(ms.ToArray());
        }

        if (!_structureNbt["structure"].ContainsKey("extensions"))
            _structureNbt["structure"]["extensions"] = new Dictionary<string, dynamic>();
        if (!_structureNbt["structure"]["extensions"].ContainsKey("badger"))
            _structureNbt["structure"]["extensions"]["badger"] = new Dictionary<string, dynamic>();
        if (!_structureNbt["structure"]["extensions"]["badger"].ContainsKey("ecs"))
            _structureNbt["structure"]["extensions"]["badger"]["ecs"] = new List<dynamic>();

        var ecsList = (List<dynamic>) _structureNbt["structure"]["extensions"]["badger"]["ecs"];
        ecsList.Clear();

        ecsList.AddRange(_badgerEntities.Select(entity => new Dictionary<string, dynamic>
        {
            ["archetype"] = Encoding.UTF8.GetBytes(entity.Archetype),
            ["pos"] = new List<dynamic>(entity.Position.Select(x => (dynamic) x)),
            ["yaw"] = entity.Yaw
        }));

        var nbt = DynamicNbt.Write(_structureNbt);
        await JsRuntime.InvokeVoidAsync("downloadFile", _mcStructureFilename, "application/octet-stream", nbt);
    }

    private void AddEntity()
    {
        _badgerEntities.Add(new StructureEntity());
    }

    private void SetBlock(int blockIdx, string newName)
    {
        var currentBlock = _blockPalette[blockIdx];
        if (currentBlock.Name == newName)
            return;

        var newInfo = BlockProvider.GetBlock(newName);
        if (newInfo == null)
            return;

        var newBlock = new SerializedBlockInfo(newName, newInfo.ValidStates.ToDictionary(x => x, _ => (byte) 0));

        _blockPalette[blockIdx] = newBlock;
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private void ClearFile()
    {
        _blockPalette.Clear();
        _badgerEntities.Clear();
        _mcStructureFilename = string.Empty;
        _state = State.FileUpload;
    }
}